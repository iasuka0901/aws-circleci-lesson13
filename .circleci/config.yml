# ----------------------------------------------------------------
# CircleCIの最新の2.1バージョンのパイプラインプロセスエンジンを使用すること
# ----------------------------------------------------------------

# CircleCIの設定ファイルのバージョンを指定。2.1は、CircleCIの最新の構成機能を使用する
version: 2.1
# CircleCIの「オーブ」と呼ばれる再利用可能な構成要素を定義。特定の機能（AWS CLI、CloudFormation、Ansible、Ruby）を使用できる
orbs:
  # AWS CLIオーブのバージョン5.1.0をインポート。AWS CLIコマンドを使用する
  aws-cli: circleci/aws-cli@4.1.3
  # CloudFormationオーブのバージョン0.1.6をインポート。CloudFormationスタックの操作を支援
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  # Ansibleプレイブックオーブのバージョン0.0.5をインポート。Ansibleを使ったデプロイを簡素化
  ansible-playbook: orbss/ansible-playbook@0.0.5
  # Rubyオーブのバージョン2.1.3をインポート。Ruby環境を簡単に設定
  ruby: circleci/ruby@2.1.3

# ----------------------------------------------------------------
# ワークフロー内で後ほど呼び出される「ジョブ」を定義する
# jobs セクションはCircleCIの設定ファイル内で「実行するタスクの単位」を定義
# ----------------------------------------------------------------

# jobs セクションの開始
jobs:
  # ジョブの名前。execute-cloudformationという名前で、CloudFormationスタックをデプロイするタスクを定義
  execute-cloudformation:
    # CircleCIの aws-cloudformation オーブが提供するデフォルトの環境
    executor: aws-cli/default
    # このジョブで実行されるアクション（ステップ）のリスト
    steps:
      # リポジトリからソースコードをチェックアウトして、ジョブが必要とするファイルを取得するステップ
      - checkout
      # AWS CLI（コマンドラインインターフェース）をセットアップするステップ
      # aws_access_key_id, aws_secret_access_keyは、環境変数から読み取られるAWS認証情報
      # regionは、AWSの操作を行うリージョンを指定
      # オーブが提供する特定のコマンドやジョブの使い方が既に定義されている
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      # AWS CloudFormationのテンプレートを使用してスタックをデプロイ
      # オーブが提供する特定のコマンドやジョブの使い方が既に定義されている
      - aws-cloudformation/deploy:
          # デプロイされるCloudFormationスタックの名前
          stack-name: stack-lecture13
          # CloudFormationテンプレートファイルのパス
          template-file-path: cloudformation/stack-lecture13.yml
          # IAMロールの作成・更新に必要な権限を指定
          capabilities: CAPABILITY_NAMED_IAM
          #  テンプレートのパラメータを指定。RDSpasswordに環境変数AWS_DB_PWの値を設定($AWS_DB_PWは事前に手動設定しておきCircleCIの環境変数に登録)
          parameter-overrides: RDSpassword=$AWS_DB_PW

      # 任意のコマンドを実行するステップを指定。これから実行する内容を定義
      - run:
          # ステップの名前。set environment variableという名前。名前は自由に設定でき、何をしているステップかを説明するためのもの
          name: set environment variable
          # 実際に実行するコマンドを指定。| は次の行に続けてコマンドを書けることを示すもので、複数行のスクリプトを記述するために使用
          # set -x :シェルで実行されるすべてのコマンドを表示するデバッグモードを有効にする。後でコマンドがどのように実行されたかをデバッグしやすくなる
          # echo exportについてはCloudformationテンプレートのOutputセクションから値を取得する。
          # 上記値を環境変数として設定するためのコマンド
          # EC2のパブリックIPアドレスを取得し、AWS_EC2_IP環境変数に設定
          # RDSのエンドポイントを取得し、AWS_DB_ENDPOINT環境変数に設定
          # ALBのホスト名を取得し、AWS_ALB_HOST環境変数に設定
          # S3バケット名を取得し、AWS_S3_BUCKET環境変数に設定
          # $BASH_ENVという特別な環境変数を使用することで、スクリプト内で設定した環境変数を後続のジョブやステップで利用可能にすることができる
          command: | 
            set -x
            #EC2ElasticIp
            echo export AWS_EC2_IP="$(aws cloudformation describe-stacks --stack-name stack-lecture13 --query "Stacks[0].Outputs[?OutputKey=='EC2ElasticIp'].OutputValue" --output text)" >> $BASH_ENV
            #DB_Endpoint
            echo export AWS_DB_ENDPOINT="$(aws cloudformation describe-stacks --stack-name stack-lecture13 --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)" >> $BASH_ENV
            #ALB_host
            echo export AWS_ALB_HOST="$(aws cloudformation describe-stacks --stack-name stack-lecture13 --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" --output text)" >> $BASH_ENV
            #S3bucket
            echo export AWS_S3_BUCKET="$(aws cloudformation describe-stacks --stack-name stack-lecture13 --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)" >> $BASH_ENV
      - run:
          # $BASH_ENVファイルの内容を表示。環境変数が正しく設定されたかどうかを確認
          name: cat $BASH_ENV
          command: |
              cat $BASH_ENV
      # $BASH_ENVファイルの内容をenv_var.shという名前のファイルにコピー。環境変数が記載されたファイルを作成
      - run:
          name: copy $BASH_ENV
          command:
              cp $BASH_ENV env_var.sh
      # CircleCI には ワークスペース という概念があり、同じワークフロー内でジョブ間のデータ共有を可能にする仮想的な領域
      # 現在のディレクトリ（root: .）内のenv_var.shファイルをCircleCIのワークスペースに保存
      # 後続のジョブでもこのファイルを利用できる
      - persist_to_workspace:
          root: .
          paths:
            - env_var.sh
      - run:
          name: Deploy CloudFormation Stack
          command: |
           aws cloudformation deploy \
            --template-file stack.yml \
            --stack-name lecture10-stack \
            --parameter-overrides CircleCIPassword=$AWS_DB_PW \
            --capabilities CAPABILITY_NAMED_IAM

# ----------------------------------------------------------------
# Ansible
# ----------------------------------------------------------------
  # ジョブの名前。Ansibleを使った作業
  execute-ansible:
    # Ansibleプレイブックを実行するための実行環境を指定。ansible-playbook/defaultという名前のexecutorを使用
    executor: ansible-playbook/default
    # このジョブが実行するステップのリストを開始
    steps:
      # Gitリポジトリの内容が作業ディレクトリにコピー
      - checkout
      # 以前のジョブで保存したワークスペースをこのジョブにアタッチ
      - attach_workspace:
          # ワークスペースが現在のディレクトリ（.）にマウントされる
          at: .
      - run:
          name: check env_var.sh
          # source env_var.shで前段（Cloudformationジョブ）で取得した環境変数をそのジョブ内で使用できる
          # env_var.shファイルの内容を表示するコマンド
          command: |
            source env_var.sh
            cat env_var.sh
      - run:
          name: read env_var.sh
          # env_var.shの内容を$BASH_ENVというファイルに追記。次のステップでこのファイルを読み込むことができる
          # $BASH_ENVの内容を表示。環境変数が正しく設定されているかを確認
          command: |
            set -x
            cat env_var.sh >> $BASH_ENV
            cat $BASH_ENV
      - run: 
          name: install ansible
          command: pip install ansible==2.10.7
      - run:
          name: Install community.mysql collection
          command: |
            ansible-galaxy collection install community.mysql -vvv
      # SSHキーをCircleCIの環境に追加するステップ
      - add_ssh_keys:
          # CircleCIが正しいSSHキーを使って接続を認証
          # CircleCIのSSHキーペア登録後のSHAを登録
          fingerprints:
            - SHA256:Rz/8yU8LAy/Xoy3vVpOCM7by/5joKknjST2/WY3N160
      # Ansibleのバージョン 2.9.23 をインストールするステップ
      - ansible-playbook/install:
          version: 2.9.23
      # playbook コマンドを実行するステップ。ansible/playbook.ymlをターゲットノードで実行
      - ansible-playbook/playbook:
          # ターゲットノードに対して実行する一連のタスク（パッケージのインストールや設定変更など）が記述
          playbook: ansible/playbook.yml
          # Ansibleのプレイブックを実行する際のオプションに関する記述
          # -u ec2-user は、EC2インスタンスのデフォルトのユーザー名
          # -i ansible/inventory は、ターゲットのホストを指定するインベントリファイルへのパス
          # --private-key ~/.ssh/id_rsa は、CircleCIに登録済みのSSHキーへのパス
          playbook-options: -u ec2-user -i ansible/inventory --private-key ~/.ssh/AWS-Ansible-lecture13.pem
      - run:
          name: Run Ansible Playbook
          command: |
            ansible-playbook -i localhost, playbook.yml  # playbook.ymlのパスに応じて変更
          environment:
            ROOT_PASSWORD: $ROOT_PASSWORD  # CircleCIの環境変数
            MASTER_USER_PASSWORD: $MASTER_USER_PASSWORD 
# ----------------------------------------------------------------
# CircleCIにおけるワークフローの定義
# ----------------------------------------------------------------
workflows:
  # ワークフローの名前
  CircleCI-Practice-workflow:
    # 実行するジョブ
    jobs:
      - execute-cloudformation
      - execute-ansible:
          # ジョブが実行される前に完了しなければならない他のジョブを指定
          requires:
            - execute-cloudformation