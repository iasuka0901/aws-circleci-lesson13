---
- name: yum update all package
  become: true
  ansible.builtin.yum:
    name: "*"
    state: latest

- name: Install pip
  become: true
  yum:
    name: python-pip
    state: present

- name: uninstall MariaDB
  become: true
  yum:
    name: mariadb*
    state: absent

- name: Install PyMySQL
  become: true
  pip:
    name: PyMySQL
    state: present

- name: Install pymysql using pip
  become: true
  pip:
    name: pymysql
    state: present

- name: Install RPM-GPG-KEY-mysql
  become: true
  rpm_key:
    state: present
    key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
  ignore_errors: true

- name: install myaql repository
  become: true
  yum:
    name: "https://repo.mysql.com//mysql84-community-release-el7-1.noarch.rpm"
    state: present

- name: install mysql packges
  become: true
  yum:
    name:
      - mysql-community-devel
      - mysql-community-server
      - mysql-community-client
    state: present

- name: Check if mysql is installed
  ansible.builtin.command:
    cmd: mysql --version
  register: mysql_check
  ignore_errors: true
  changed_when: false

- name: Install mysql
  ansible.builtin.yum:
    name: mysql
    state: present
  register: mysql_install
  become: yes
  when: mysql_check.failed

- name: Install mysql-devel
  ansible.builtin.yum:
    name: mysql-devel
    state: present
  become: yes
  when: mysql_check.failed

- name: add database.yml.j2
  become: true
  template:
    src: database.yml.j2
    dest: "{{ app_dir }}/config/database.yml"

- name: Start MySQL service
  become: true
  systemd:
    name: mysqld
    state: started
  ignore_errors: true

- name: Create MySQL admin user with password
  community.mysql.mysql_user:
    name: admin
    host: "%"
    password: "{{ lookup('env', 'MASTER_USER_PASSWORD') }}"  # MASTER_USER_PASSWORD環境変数を使用
    state: present
    login_user: root
    login_password: "{{ lookup('env', 'ROOT_PASSWORD') }}"  # ROOT_PASSWORD環境変数を使用
    login_host: localhost
  ignore_errors: true

- name: Start MySQL service
  become: true
  systemd:
    name: mysqld
    state: restarted

- name: Ensure mysql_native_password plugin is loaded
  become: yes  # 追加
  lineinfile:
    path: /etc/my.cnf
    regexp: '^plugin-load-add'
    line: 'plugin-load-add = mysql_native_password.so'
    state: present
  notify:
    - restart mysql

# Railsアプリケーションのセットアップを行う内容
# database.ymlファイルの生成とアプリケーションのセットアップスクリプト（bin/setup）の実行
# database.ymlを作成する
- name: create database.yml
  # ansible.builtin.templateモジュールを使い、テンプレートファイルから設定ファイルを生成する
  ansible.builtin.template:
    # srcは、テンプレートファイルのパスを指定
    # templates/database.yml.j2はJinja2形式のテンプレートで、データベースの設定内容が記述
    src: templates/database.yml.j2
    # destは、生成されたファイルを保存する宛先パス
    # {{app_dir}}は、アプリケーションディレクトリのパスが格納される変数で、config/database.ymlの場所に出力
    dest: "{{app_dir}}/config/database.yml"
  # ファイルが生成されてもタスクの状態は「変更なし」とみなす
  changed_when: false

# アプリケーションセットアップスクリプトを実行するタスク
- name: bin/setup
  # ansible.builtin.shellモジュールを使って、シェルコマンドを実行
  ansible.builtin.shell:
    # /bin/bash -lc "bin/setup"は、ログインシェルとしてBashを起動し、bin/setupスクリプトを実行
    # Railsアプリケーションに必要なセットアップ（データベースの作成、必要なファイルの準備など）を行う
    cmd: /bin/bash -lc "bin/setup"
  # コマンド実行結果をsetup_resultという変数に保存
  register: setup_result
  # chdirを指定することで、コマンド実行時の作業ディレクトリを設定
  args:
    chdir: "{{app_dir}}"
