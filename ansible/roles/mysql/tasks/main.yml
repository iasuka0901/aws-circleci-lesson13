---
- name: yum update all package
  become: true
  ansible.builtin.yum:
    name: "*"
    state: latest

- name: Install pip
  become: true
  yum:
    name: python-pip
    state: present

- name: uninstall MariaDB
  become: true
  yum:
    name: mariadb*
    state: absent

- name: Install PyMySQL
  become: true
  pip:
    name: PyMySQL
    state: present

- name: Install pymysql using pip
  become: true
  pip:
    name: pymysql
    state: present

- name: Install RPM-GPG-KEY-mysql
  become: true
  rpm_key:
    state: present
    key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
  ignore_errors: true

- name: install myaql repository
  become: true
  yum:
    name: "https://repo.mysql.com//mysql84-community-release-el7-1.noarch.rpm"
    state: present

- name: Install MySQL development libraries and client/server
  become: true
  yum:
    name:
      - mysql-community-devel
      - mysql-community-server
      - mysql-community-client
    state: present

- name: Install mysql2 gem
  shell: |
    source /home/ec2-user/.rvm/scripts/rvm
    /home/ec2-user/.rvm/rubies/ruby-3.2.3/bin/gem install mysql2
  args:
    executable: /bin/bash

- name: add database.yml.j2
  become: true
  template:
    src: database.yml.j2
    dest: "{{ app_dir }}/config/database.yml"

# Railsアプリケーションのセットアップを行う内容
# database.ymlファイルの生成とアプリケーションのセットアップスクリプト（bin/setup）の実行
# database.ymlを作成する
- name: create database.yml
  # ansible.builtin.templateモジュールを使い、テンプレートファイルから設定ファイルを生成する
  ansible.builtin.template:
    # srcは、テンプレートファイルのパスを指定
    # templates/database.yml.j2はJinja2形式のテンプレートで、データベースの設定内容が記述
    src: templates/database.yml.j2
    # destは、生成されたファイルを保存する宛先パス
    # {{app_dir}}は、アプリケーションディレクトリのパスが格納される変数で、config/database.ymlの場所に出力
    dest: "{{app_dir}}/config/database.yml"
  # ファイルが生成されてもタスクの状態は「変更なし」とみなす
  changed_when: false

# アプリケーションセットアップスクリプトを実行するタスク
- name: bin/setup
  # ansible.builtin.shellモジュールを使って、シェルコマンドを実行
  ansible.builtin.shell:
    # /bin/bash -lc "bin/setup"は、ログインシェルとしてBashを起動し、bin/setupスクリプトを実行
    # Railsアプリケーションに必要なセットアップ（データベースの作成、必要なファイルの準備など）を行う
    cmd: /bin/bash -lc "bin/setup"
  # コマンド実行結果をsetup_resultという変数に保存
  register: setup_result
  # chdirを指定することで、コマンド実行時の作業ディレクトリを設定
  args:
    chdir: "{{app_dir}}"
